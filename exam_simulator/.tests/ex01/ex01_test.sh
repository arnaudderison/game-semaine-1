#!/bin/zsh

EXO="ex01"
SOLUTION_FILE="./exo/$EXO/LaTorche.c"
OUTPUT_FILE="output.txt"
EXECUTABLE="solution"

# V√©rifier si la solution existe
if [ ! -f "$SOLUTION_FILE" ]; then
    echo "‚ùå KO: Erreur : fichier '$SOLUTION_FILE' introuvable."
    exit 1
fi

# Compiler le fichier
gcc -Wall -Werror -Wextra "$SOLUTION_FILE" -o "$EXECUTABLE" 2> /dev/null
if [ $? -ne 0 ]; then
    echo "‚ùå KO: Compilation √©chou√©e."
    exit 1
fi

# V√©rifier la Norminette
echo "üîç V√©rification Norminette..."
norminette "$SOLUTION_FILE" 1> /dev/null
if [ $? -ne 0 ]; then
    echo "‚ùå KO: Erreur de Norminette. Corrige le style avant de continuer."
    exit 1
fi
echo "‚úÖ Norminette : OK"

# V√©rifier les fuites de m√©moire avec Valgrind
echo "üõ†Ô∏è V√©rification avec Valgrind..."
ulimit -n 1048576
valgrind --leak-check=full --error-exitcode=1 "./$EXECUTABLE" > /dev/null 2> valgrind_errors.log
if [ $? -ne 0 ]; then
    echo "‚ùå KO: Valgrind d√©tecte des fuites de m√©moire. V√©rifie 'valgrind_errors.log'."
    cat valgrind_errors.log
    exit 1
fi
echo "‚úÖ Valgrind : Pas de fuites m√©moire"

# Ex√©cuter et capturer la sortie
"./$EXECUTABLE" > "$OUTPUT_FILE"

# V√©rifier la sortie
EXPECTED="LaTorche"
RESULT=$(cat "$OUTPUT_FILE")


if [ "$RESULT" == "$EXPECTED" ]; then
    echo "‚úÖ Test r√©ussi ! La sortie est correcte : '$RESULT'"
else
    echo "‚ùå KO: Test √©chou√©. Sortie attendue : '$EXPECTED', obtenue : '$RESULT'"
fi

# Nettoyage
rm -f "$EXECUTABLE" "$OUTPUT_FILE"
